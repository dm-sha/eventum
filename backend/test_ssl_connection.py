#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å VK API
"""

import ssl
import socket
import requests
import urllib3
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

def test_ssl_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VK API"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å VK API...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
    try:
        import ssl
        context = ssl.create_default_context()
        with socket.create_connection(('id.vk.ru', 443), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname='id.vk.ru') as ssock:
                cert = ssock.getpeercert()
                print(f"‚úÖ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω")
                if isinstance(cert, dict):
                    issuer = cert.get('issuer', {})
                    if isinstance(issuer, dict):
                        print(f"   –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω: {issuer.get('organizationName', 'Unknown')}")
                    else:
                        print(f"   –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω: {issuer}")
                    print(f"   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {cert.get('notAfter', 'Unknown')}")
                else:
                    print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ: {cert}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: HTTP-–∑–∞–ø—Ä–æ—Å —Å retry-–ª–æ–≥–∏–∫–æ–π
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞...")
    try:
        session = requests.Session()
        
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["GET", "POST"]
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("https://", adapter)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ VK ID API
        response = session.get(
            'https://id.vk.ru/oauth2/user_info',
            timeout=30,
            verify=True
        )
        
        print(f"‚úÖ HTTP-–∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        
    except requests.exceptions.SSLError as e:
        print(f"‚ùå SSL-–æ—à–∏–±–∫–∞: {e}")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ OpenSSL
    print("\n3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SSL...")
    print(f"   –í–µ—Ä—Å–∏—è urllib3: {urllib3.__version__}")
    print(f"   –í–µ—Ä—Å–∏—è requests: {requests.__version__}")
    
    try:
        import ssl
        print(f"   –í–µ—Ä—Å–∏—è OpenSSL: {ssl.OPENSSL_VERSION}")
    except:
        print("   –í–µ—Ä—Å–∏—è OpenSSL: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    test_ssl_connection()
