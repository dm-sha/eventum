"""
Django settings for eventum project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 'yes')

# Base URL for generating absolute URLs (should be HTTPS in production)
BASE_URL = os.getenv('BASE_URL', None)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    'rest_framework',
    'rest_framework_simplejwt',
    'app',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Для раздачи статических файлов
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
  'http://localhost:5173',  # For dev
  'http://localhost:5174',  # For dev (alternative port)
  'https://eventum-web-ui.vercel.app',  # Your Vercel URL
  'https://merup.ru',
  'https://bbapo5ibqs4eg6dail89.containers.yandexcloud.net',  # Yandex Cloud container
]

# CSRF trusted origins для админки Django
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'http://localhost:5174',
    'https://eventum-web-ui.vercel.app',
    'https://merup.ru',
    'https://*.merup.ru',
    'https://bbapo5ibqs4eg6dail89.containers.yandexcloud.net',
]

CORS_ALLOW_CREDENTIALS = True

# Дополнительные настройки для preflight запросов
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 часа
CORS_ALLOW_PRIVATE_NETWORK = True

# Настройки для обработки preflight запросов
CORS_EXPOSE_HEADERS = [
    'Content-Type',
    'X-CSRFToken',
    'Authorization',  # Добавлено для мобильных браузеров
    'Cache-Control',  # Добавлено для кэширования
]

# В режиме разработки разрешаем все localhost порты
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^http://localhost:\d+$",  # Разрешаем любой localhost порт
        r"^http://127\.0\.0\.1:\d+$",  # Разрешаем 127.0.0.1
    ]
else:
    CORS_ALLOW_ALL_ORIGINS = False  # Безопасность: разрешаем только указанные домены
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https://([a-zA-Z0-9-]+\.)?merup\.ru$",  # Разрешаем поддомены *.merup.ru
        r"^https://.*\.vercel\.app$",  # Для Vercel деплоев
    ]
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'Authorization',
    'content-type',
    'Content-Type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'X-Requested-With',
    'Access-Control-Request-Method',
    'Access-Control-Request-Headers',
    'Cache-Control',  # Добавлено для мобильных браузеров
    'Pragma',         # Добавлено для мобильных браузеров
    'If-Modified-Since',  # Добавлено для кэширования
    'If-None-Match',     # Добавлено для кэширования
]
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

ROOT_URLCONF = 'eventum.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eventum.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': '6432',
        'CONN_MAX_AGE': 600,  # Увеличиваем время жизни соединения для сессионного режима
        'DISABLE_SERVER_SIDE_CURSORS': False,  # Включаем серверные курсоры для сессионного режима
        'OPTIONS': {
            'sslmode': 'require',
            'connect_timeout': 30,
            'options': '-c default_transaction_isolation="read committed"',
            'keepalives': 1,
            'keepalives_idle': 30,
            'keepalives_interval': 10,
            'keepalives_count': 5,
        },
        'CONN_HEALTH_CHECKS': True,
    }
}

# Настройки для работы с Odyssey в сессионном режиме
DATABASE_CONNECTION_POOLING = {
    'MAX_CONNS': 30,  # Увеличиваем для сессионного режима
    'MIN_CONNS': 10,  # Увеличиваем для сессионного режима
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'  # Устанавливаем московское время как локальную таймзону

USE_I18N = True

USE_TZ = False  # Отключаем поддержку таймзон - работаем только с локальным временем


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Настройки WhiteNoise для раздачи статических файлов
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Дополнительные настройки WhiteNoise
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройка кастомной модели пользователя
AUTH_USER_MODEL = 'app.UserProfile'

# Настройки JWT
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Настройки REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'app.authentication.QueryTokenAuthentication',  # Наш кастомный аутентификатор
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Резервный
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
}

# VK API настройки
VK_APP_ID = os.getenv('VK_APP_ID')
VK_APP_SECRET = os.getenv('VK_APP_SECRET')
VK_REDIRECT_URI = os.getenv('VK_REDIRECT_URI', 'http://localhost:5173/auth/vk/callback')

# Настройки SSL для внешних запросов
import ssl
import urllib3

# Отключаем предупреждения urllib3 о небезопасных запросах
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Настройки для requests
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# Глобальные настройки SSL
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = True
ssl_context.verify_mode = ssl.CERT_REQUIRED

# Настройки сессий
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 недели
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

BASE_COOKIE_DOMAIN = os.getenv('BASE_COOKIE_DOMAIN') or os.getenv('BASE_DOMAIN')

if BASE_COOKIE_DOMAIN:
    normalized_domain = BASE_COOKIE_DOMAIN.lstrip('.')
    if normalized_domain:
        SESSION_COOKIE_DOMAIN = f".{normalized_domain}"
        CSRF_COOKIE_DOMAIN = f".{normalized_domain}"
SESSION_SAVE_EVERY_REQUEST = False
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'

# Настройки для стабильной работы с большими наборами данных
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000  # Увеличиваем лимит полей для админки
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB для больших форм

# Отключаем CSRF для API (используем JWT токены)
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

# Настройки для оптимизации запросов
# USE_TZ и TIME_ZONE уже настроены выше

# Настройки админки Django
ADMIN_SITE_HEADER = "Merup"
ADMIN_SITE_TITLE = "Merup"
ADMIN_INDEX_TITLE = "Администрирование Merup"

# Настройки логирования
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'auth_debug.log',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'requests.packages.urllib3': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.contrib.sessions': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}