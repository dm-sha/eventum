# Имя вашего workflow
name: Build and Deploy to Yandex Cloud

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Переменные окружения
env:
  # ИЗМЕНЕНО: Имя образа в Yandex Container Registry (может быть любым)
  IMAGE_NAME_YC: eventum-backend

jobs:
  # Задача: сборка и публикация Docker-образа в Yandex Container Registry
  build:
    name: Build and Push Image to Yandex Registry
    runs-on: ubuntu-latest
    
    # Права доступа для этой задачи больше не нужны, так как мы не используем GHCR
    # permissions:
    #   packages: write
    #   contents: read

    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}

    steps:
      # 1. Клонируем репозиторий
      - name: Check out repository
        uses: actions/checkout@v4
      
      # 2. Устанавливаем короткий хэш коммита
      - name: Set short git SHA
        id: vars
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT

      # 3. ИЗМЕНЕНО: Установка Yandex Cloud CLI (нужен для аутентификации в реестре)
      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | sudo bash -s -- -i /usr/local/yandex-cloud -n
          sudo ln -s /usr/local/yandex-cloud/bin/yc /usr/local/bin/yc
      
      # 4. ИЗМЕНЕНО: Аутентификация в Yandex Cloud (нужна для получения токена к реестру)
      - name: Authenticate in Yandex Cloud
        run: |
          cat <<EOF > key.json
          ${{ secrets.YC_SA_KEY_JSON }}
          EOF
          yc config profile create sa-profile
          yc config set service-account-key key.json

      # 5. ИЗМЕНЕНО: Создание Kaniko config.json ВНУТРИ рабочей директории
      - name: Create Kaniko config.json for Yandex Registry
        run: |
          # Создаем папки kaniko/.docker прямо в корне репозитория
          mkdir -p ${{ github.workspace }}/kaniko/.docker
          # Получаем пароль
          YC_REGISTRY_PASSWORD=$(yc container registry get-login-password --format=json | jq -r .password)
          YC_REGISTRY_ENDPOINT="cr.yandex"
          # Записываем config.json в созданную папку
          echo "{\"auths\":{\"${YC_REGISTRY_ENDPOINT}\":{\"username\":\"json_key\",\"password\":\"${YC_REGISTRY_PASSWORD}\"}}}" > ${{ github.workspace }}/kaniko/.docker/config.json

      # 6. ИЗМЕНЕНО: Сборка и отправка образа с указанием пути к конфигу
      - name: Build and push container image with Kaniko
        uses: docker://gcr.io/kaniko-project/executor:debug
        with:
          args: >-
            --context "."
            --dockerfile "backend/Dockerfile"
            --destination "cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME_YC }}:${{ steps.vars.outputs.sha_short }}"
            --custom-platform "linux/amd64"
            --cache=true
            --docker-config="/github/workspace/kaniko"

  # Задача деплоя остается почти без изменений
  deploy:
    name: Deploy to Yandex Cloud
    needs: build
    runs-on: ubuntu-latest
    
    environment:
      name: production
      # url: (можно указать URL вашего контейнера)

    steps:
      # 1. Установка Yandex Cloud CLI
      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /usr/local/yandex-cloud -n
          sudo ln -s /usr/local/yandex-cloud/bin/yc /usr/local/bin/yc

      # 2. Аутентификация в Yandex Cloud
      - name: Authenticate in Yandex Cloud
        run: |
          cat <<EOF > key.json
          ${{ secrets.YC_SA_KEY_JSON }}
          EOF
          yc config profile create sa-profile
          yc config set service-account-key key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      # 3. ИЗМЕНЕНО: Деплой новой ревизии Serverless Container, используя образ из Yandex Registry
      - name: Deploy new container revision
        id: deploy
        run: |
          yc serverless container revision deploy \
            --container-id ${{ secrets.YC_CONTAINER_ID }} \
            --image "cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME_YC }}:${{ needs.build.outputs.sha_short }}" \
            --cores 4 \
            --memory 1024mb \
            --concurrency 1 \
            --execution-timeout 10s \
            --service-account-id ${{ secrets.YC_SERVICE_ACCOUNT_ID }} \
            --secret environment-variable=DB_NAME,id=e6qmac6cr2goqb03sfjn,version-id=e6qtom5dst8bamfc4pfh,key=DB_NAME \
            --secret environment-variable=DB_HOST,id=e6qmac6cr2goqb03sfjn,version-id=e6qtom5dst8bamfc4pfh,key=DB_HOST \
            --secret environment-variable=DB_PASSWORD,id=e6qmac6cr2goqb03sfjn,version-id=e6qtom5dst8bamfc4pfh,key=DB_PASSWORD \
            --secret environment-variable=DB_USER,id=e6qmac6cr2goqb03sfjn,version-id=e6qtom5dst8bamfc4pfh,key=DB_USER
