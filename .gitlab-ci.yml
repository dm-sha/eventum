stages:
  - build
  - release
  - frontend_build
  - frontend_deploy

build-job:
  stage: build
  image: docker:27.1.2
  services:
    - name: docker:27.1.2-dind
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: "1"
    DOCKER_TLS_CERTDIR: ""   # важно для dind без TLS
  before_script:
    # логин в YCR БЕЗ yc, через json_key
    - echo "$SA_PROD_DEPLOYER_PRIVATE_KEY" | docker login --username json_key --password-stdin cr.yandex
    - docker buildx create --use
  script:
    - |
      docker buildx build \
        -f backend/Dockerfile \
        -t "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}" \
        --push backend

variables:
  DEPLOY_DIR: /srv/eventum
  DEPLOY_USER: deploy
  DEPLOY_HOST: 84.201.185.243

deploy-to-vm:
  stage: release
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client bash curl jq gettext
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts
  script:
    # 1) Создаём .env локально на раннере (используем printf, чтобы точно подставить значения)
    - |
      printf 'DJANGO_SECRET_KEY=%s\nDB_NAME=%s\nDB_USER=%s\nDB_PASSWORD=%s\nDB_HOST=%s\nBASE_URL=%s\nPORT=8000\nVK_APP_ID=%s\nVK_APP_SECRET=%s\nVK_REDIRECT_URI=%s\n' \
        "${DJANGO_SECRET_KEY}" "${DB_NAME}" "${DB_USER}" "${DB_PASSWORD}" "${DB_HOST}" "${BASE_URL}" "${VK_APP_ID}" "${VK_APP_SECRET}" "${VK_REDIRECT_URI}" > .env
    - chmod 600 .env
    - scp -o StrictHostKeyChecking=yes .env ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/.env
    - scp -o StrictHostKeyChecking=yes backend/docker-compose.yml ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/docker-compose.yml || echo "No local docker-compose.yml to copy, assuming exists on host"
    - |
      # Сохраняем ключ в файл для безопасной передачи
      echo "$SA_PROD_DEPLOYER_PRIVATE_KEY" > /tmp/sa_key.json
      
      # Копируем ключ на удаленный сервер
      scp -o StrictHostKeyChecking=yes /tmp/sa_key.json ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/sa_key.json
      
      # Удаляем локальный ключ
      rm /tmp/sa_key.json
      
      ssh ${DEPLOY_USER}@${DEPLOY_HOST} bash <<SSH
        set -euo pipefail

        cd ${DEPLOY_DIR} || { echo "ERROR: deploy dir not found: ${DEPLOY_DIR}" >&2; exit 2; }

        echo "Files in deploy dir:" && ls -la

        # Логинимся в registry (читаем ключ из файла)
        cat /tmp/sa_key.json | docker login --username json_key --password-stdin cr.yandex
        
        # Удаляем ключ с удаленного сервера
        rm /tmp/sa_key.json

        IMAGE_RAW='${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}'
        IMAGE="$(echo "$IMAGE_RAW" | tr -d '\r\n' )"
        echo "IMAGE=|$IMAGE|"

        if [ ! -f docker-compose.yml ]; then
          echo "ERROR: docker-compose.yml not found in ${DEPLOY_DIR}" >&2
          ls -la
          exit 3
        fi

        docker pull "$IMAGE" || echo "docker pull failed or image not present; continuing with docker compose pull"
        docker compose pull || true
        docker compose up -d --remove-orphans

        docker compose run --rm web python manage.py migrate --noinput
        docker compose run --rm web python manage.py collectstatic --noinput || true

        docker compose ps
        sleep 2
        curl -f --retry 5 --retry-delay 2 --max-time 10 "https://api.merup.ru/healthz" || {
          echo "Health check failed" >&2
          docker compose logs --tail=200
          exit 4
        }

        echo "Deploy finished successfully"
      SSH
  environment:
    name: production
    url: https://api.merup.ru

# ---- FRONTEND BUILD ----

frontend-build:
  stage: frontend_build
  image: node:22-alpine
  script:
    - npm ci --prefix frontend
    - npm run build --prefix frontend   # CRA -> frontend/build, Vite -> frontend/dist
    - |
      # нормализуем в ./dist для унификации
      if [ -d "frontend/build" ]; then mv frontend/build dist; else mv frontend/dist dist; fi
  artifacts:
    paths: [dist]
    expire_in: 1 week
  only: [main, tags]

# ---- FRONTEND DEPLOY to Object Storage ----
frontend-deploy:
  stage: frontend_deploy
  image: python:3.12-alpine
  dependencies: [frontend-build]
  before_script:
    - pip install -q awscli
    - export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
    - export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
    - export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"
    - export AWS_ENDPOINT_URL="${AWS_ENDPOINT_URL}"
  script:
    # 1) ассеты с хэшами — год, immutable
    - |
      aws --endpoint-url "$AWS_ENDPOINT_URL" s3 sync dist/ "s3://${S3_BUCKET}/" \
        --delete \
        --exclude "index.html" --exclude "*.map" \
        --metadata-directive REPLACE \
        --cache-control "public, max-age=31536000, immutable"
    # 2) sourcemaps (если есть) — короткий кэш
    - |
      if compgen -G "dist/**/*.map" > /dev/null; then
        aws --endpoint-url "$AWS_ENDPOINT_URL" s3 sync dist/ "s3://${S3_BUCKET}/" \
          --exclude "*" --include "*.map" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=300"
      fi
    # 3) index.html — no-cache
    - |
      aws --endpoint-url "$AWS_ENDPOINT_URL" s3 cp dist/index.html "s3://${S3_BUCKET}/index.html" \
        --metadata-directive REPLACE \
        --cache-control "no-cache, no-store, must-revalidate" \
        --content-type "text/html; charset=utf-8"
  only: [main, tags]